////////////////////////////////////////////////////////////////////////////////
// IZI CLOUD - создание документов IIKO из Бухгалтерии предприятия 3.0 
// Файл: 		демонстрационная внешняя обработка
// Поддержка:   https://izi.cloud/

&НаКлиенте
Перем ТекущаяНастройка;

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)	
	ЗаполнитьЗначенияСвойств(ЭтаФорма, Параметры, Параметры.Поля);	
	ФорматнаяСтрокаЧисел = "ЧРД=.; ЧН=0; ЧГ=0";
	ОбъектЗн = РеквизитФормыВЗначение("Объект");
	МакетКартинки = ОбъектЗн.ПолучитьМакет("КартинкаУведомлений");
	КартинкаУведомлений = Новый Картинка(МакетКартинки);
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	ЭтаФорма.Заголовок = "Выгрузка на сервер "+IikoХост+":"+Формат(IikoПорт, "ЧГ=0");
	ЗаполнитьСписокВыбораТипаНоменклатуры();
	ТекущаяНастройка = ЗагрузитьНастройкиНаСервере();
	ПоказатьОповещениеПользователя("Пожалуйста подождите",,"Загрузка данных из IIKO...",КартинкаУведомлений,СтатусОповещенияПользователя.Важное);
	ПодключитьсяКIIKO();
КонецПроцедуры

&НаКлиенте
Процедура ПодключитьсяКIIKO()
	РезультатПодключения = ПолучитьCookieIIKO();
	
	Если Не РезультатПодключения Тогда
		//ЗагрузитьНоменклатуруИзАйко();
		ЗагрузитьГруппыНоменклатурыАйко();
		ЗагрузитьЕдиницыИзмеренияИзАйко();
		//ЗагрузитьСкладыИзАйко();
		//ЗагрузитьПоставщиковИзАйко();
		//ЗагрузитьПодразделенияИзАйко();
		//ЗагрузитьСтатьиЗатратИзАйко();
		ПроверитьЗаполнениеТаблиц();
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Функция ПолучитьCookieIIKO()
	Попытка
		HTTPСоединение = Новый HTTPСоединение(IikoХост, IikoПорт, IikoЛогин, IikoПароль);
		HTTPЗапрос = Новый HTTPЗапрос("/resto/");
		HTTPОтвет = HTTPСоединение.Получить(HTTPЗапрос);
		Если HTTPОтвет.КодСостояния<>200 Тогда
			ЗаписатьВЛог("Получение cookie: Сервер вернул код, отличный от успешного - "+HTTPОтвет.КодСостояния);
			Возврат Истина;
		Иначе
			ЗначениеКуки  = HTTPОтвет.Заголовки.Получить("Set-Cookie");
			ЧастиЗначения = СтрРазделить(ЗначениеКуки, "; ");
			IikoCookie = ЧастиЗначения[0];
			Возврат Ложь;
		КонецЕсли;
	Исключение
		ЗаписатьВЛог(ОписаниеОшибки());
		Возврат Истина;
	КонецПопытки;
КонецФункции

&НаСервере
Функция ПолучитьДанныеИзIIKO(МетодСервиса, МетодHTTP=Неопределено, Данные=Неопределено)
	СтруктураОтвета = Новый Структура;	
	Попытка
		Если СервисSSL Тогда
			HTTPСоединение = Новый HTTPСоединение(СервисХост,СервисПорт,,,,,Новый ЗащищенноеСоединениеOpenSSL());
		Иначе
			HTTPСоединение = Новый HTTPСоединение(СервисХост,СервисПорт);	
		КонецЕсли;
		HTTPЗапрос 	   = Новый HTTPЗапрос("iiko/hs/v1/"+МетодСервиса);
		HTTPЗапрос.Заголовки.Вставить("IIKO_HOST",  	IikoХост);
		HTTPЗапрос.Заголовки.Вставить("IIKO_PORT",  	Формат(IikoПорт, "ЧГ=0"));
		HTTPЗапрос.Заголовки.Вставить("IIKO_LOGIN", 	IikoЛогин);
		HTTPЗапрос.Заголовки.Вставить("IIKO_PASS",  	ПолучитьХэш(IikoПароль));
		HTTPЗапрос.Заголовки.Вставить("IIKO_BACK_TYPE", IikoТипБэка);
		HTTPЗапрос.Заголовки.Вставить("IIKO_DBMS_TYPE", IikoТипСУБД);
		HTTPЗапрос.Заголовки.Вставить("IIKO_COOKIE", 	IikoCookie);
		Если МетодHTTP=Неопределено Тогда
			МетодHTTP = "GET";
		КонецЕсли;
		Если Данные<>Неопределено Тогда
			HTTPЗапрос.УстановитьТелоИзСтроки(Данные);
		КонецЕсли;
		ZIPОтвет = ПолучитьИмяВременногоФайла("zip");
		HTTPОтвет = HTTPСоединение.ВызватьHTTPМетод(МетодHTTP, HTTPЗапрос, ZIPОтвет);	
		Если HTTPОтвет.КодСостояния = 200 Тогда
			СтруктураОтвета = ПреобразоватьJSONСтрокуВСтруктуру(ПолучитьJSONИзZIP(ZIPОтвет));
		ИначеЕсли HTTPОтвет.КодСостояния = 401 Тогда
				ЗаписатьВЛог("Не заданы параметры подключения к IIKO");	
		ИначеЕсли HTTPОтвет.КодСостояния = 405 Тогда
				ЗаписатьВЛог("Метод не поддерживается");
		Иначе     
			ЗаписатьВЛог("Метод "+МетодСервиса+": Сервер вернул код состояния отличный от успешного "+HTTPОтвет.КодСостояния);
			Возврат Неопределено;
		КонецЕсли;
	Исключение
		ЗаписатьВЛог(ОписаниеОшибки());
		Возврат Неопределено;
	КонецПопытки;	
	
	Возврат СтруктураОтвета;
КонецФункции

// ФУНКЦИИ ОБЩЕГО НАЗНАЧЕНИЯ

&НаКлиентеНаСервереБезКонтекста
Функция ПреобразоватьJSONСтрокуВСтруктуру(JSONСтрока)
	ЧтениеJSON = Новый ЧтениеJSON;
	ЧтениеJSON.УстановитьСтроку(JSONСтрока);
	Структура = ПрочитатьJSON(ЧтениеJSON, Ложь);
	ЧтениеJSON.Закрыть();
	Возврат Структура;
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция ПреобразоватьСтруктуруВJSONСтроку(Структура)
	ЗаписьJSON	= Новый ЗаписьJSON;
	ЗаписьJSON.УстановитьСтроку();
	ЗаписатьJSON(ЗаписьJSON, Структура);
	Возврат ЗаписьJSON.Закрыть(); 
КонецФункции

Функция ПолучитьJSONИзZIP(ПутьКZIP)
	КВФ = КаталогВременныхФайлов();
	АрхивZIP = Новый ЧтениеZipФайла(ПутьКZIP);
	АрхивZIP.ИзвлечьВсе(КВФ);
	АрхивZIP.Закрыть();
	ЧтениеОтвета = Новый ЧтениеТекста(КВФ + ПолучитьРазделительПути() + "response.json");
	JSONОтвет = ЧтениеОтвета.Прочитать();
	ЧтениеОтвета.Закрыть();
	Возврат JSONОтвет;
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция Транслит(Вход)   
    Русский = "абвгдеёжзийклмнопрстуфхцчшщьыъэюяАБВГДЕЁЖЗИЙКЛМНОПРСТУФХЦЧШЩЬЫЪЭЮЯ";
    Англ    = "a;b;v;g;d;e;yo;zh;z;i;y;k;l;m;n;o;p;r;s;t;u;f;kh;ts;ch;sh;shch;;y;;e;yu;ya;A;B;V;G;D;E;Yo;Zh;Z;I;Y;K;L;M;N;O;P;R;S;T;U;F;Kh;Ts;Ch;Sh;Shch;;Y;;E;Yu;Ya";
    МассивАнгл = СтрРазделить(Англ,";");
    ДлиннаВход = СтрДлина(Вход);
    Выход = "";
    Для а=1 По ДлиннаВход Цикл 
        ТекущийСимвол = Сред(Вход,а,1);    
        Позиция = Найти(Русский,ТекущийСимвол);
        Если Позиция > 0 Тогда 
            Выход = Выход + МассивАнгл[Позиция-1];
        Иначе 
            Выход = Выход + ТекущийСимвол;
        КонецЕсли;
    КонецЦикла;
    Возврат Выход;   
КонецФункции

&НаКлиенте
Функция ПолучитьСоответствияТиповНоменклатурыАйко()
	СоответствиеТипов = Новый Соответствие;
	СоответствиеТипов.Вставить("GOODS", 	"Товар");	
	СоответствиеТипов.Вставить("DISH", 		"Блюдо");
	СоответствиеТипов.Вставить("PREPARED", 	"Заготовка");
	СоответствиеТипов.Вставить("SERVICE", 	"Услуга");
	СоответствиеТипов.Вставить("MODIFIER", 	"Модификатор");
	СоответствиеТипов.Вставить("OUTER", 	"Внешний товар");
	СоответствиеТипов.Вставить("PETROL", 	"Топливо");
	СоответствиеТипов.Вставить("RATE", 		"Тариф");
	Возврат СоответствиеТипов;	
КонецФункции

&НаСервере
Функция ПолучитьХэш(Стр)
	ХД = Новый ХешированиеДанных(ХешФункция.SHA1);
	ХД.Добавить(Стр);
	Возврат НРег(СтрЗаменить(СокрЛП(ХД.ХешСумма)," ", ""))
КонецФункции

&НаКлиенте
Функция ПробразованиеИмениИзWEB(СтрокаОтвета)
	СтрокаОтвета = СокрЛП(СтрокаОтвета);	
	СтрокаОтвета = СтрЗаменить(СтрокаОтвета, "&amp;", "&");
	Возврат СтрокаОтвета;
КонецФункции

&НаСервере
Процедура ЗаписатьВЛог(Мэсседж, Данные=Неопределено)
	Сообщить("["+ТекущаяДата()+"] " + Мэсседж);
КонецПроцедуры

// ДАННЫЕ АЙКО

&НаКлиенте
Процедура ЗагрузитьНоменклатуруИзАйко()
	СТиповНоменклатуры = ПолучитьСоответствияТиповНоменклатурыАйко();
	МассивОтвета = ПолучитьДанныеИзIIKO("entity/products");
	Если МассивОтвета <> Неопределено Тогда
		Если МассивОтвета.Количество()>0 Тогда
			СН = ТабНоменклатураАйко;
			СН.Очистить();
			Для каждого Элемент Из МассивОтвета Цикл
				ТипНоменклатуры = СТиповНоменклатуры.Получить(Элемент.type);
				Если ТипНоменклатуры <> Неопределено Тогда
					нСтрока 				 = СН.Добавить();
					нСтрока.КодАйко 		 = Элемент.vcode;
					нСтрока.НоменклатураАйко = "[" + ТипНоменклатуры + "] " +
											ПробразованиеИмениИзWEB(Элемент.name);
					нСтрока.ИдЕИ 			 = Элемент.unit;
					нСтрока.Ид 			 	 = Элемент.id;
				Иначе
					ЗаписатьВЛог("Неизвестный тип номенклатуры "+Элемент.type);
				КонецЕсли;
			КонецЦикла;
			СН.Сортировать("НоменклатураАйко");
		Иначе
			ЗаписатьВЛог("Список номенклатуры пуст.");
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ЗагрузитьГруппыНоменклатурыАйко()
	МассивОтвета = ПолучитьДанныеИзIIKO("entity/productGroups");
	Если МассивОтвета = Неопределено Тогда
		ЗаписатьВЛог("Не удалось получить группы номенклатуры Айко");
		Возврат;
	КонецЕсли;
	
	Если МассивОтвета.Количество()=0 Тогда
		ЗаписатьВЛог("Список групп номенклатуры пуст");
		Возврат;
	КонецЕсли;
	
	СГН = ТабГруппыНоменклатурыАйко;
	СГН.Очистить();
	Для каждого Элемент Из МассивОтвета Цикл
		нСтрока = СГН.Добавить();
		нСтрока.Ид           = Элемент.id;
		нСтрока.Наименование = ПробразованиеИмениИзWEB(Элемент.name);
		нСтрока.Код          = Элемент.code;
		нСтрока.Родитель     = Элемент.parent;
	КонецЦикла;
	СГН.Сортировать("Наименование");
КонецПроцедуры

&НаКлиенте
Процедура ЗагрузитьЕдиницыИзмеренияИзАйко()
	ЕИАйкоМассив = ПолучитьДанныеИзIIKO("entity/units");
	Если ЕИАйкоМассив <> Неопределено Тогда
		Если ЕИАйкоМассив.Количество()>0 Тогда
			СЕИ = ТабЕдиницыИзмеренияАйко;
			СЕИ.Очистить();
			Для Каждого Элемент Из ЕИАйкоМассив Цикл
				СтрЕИАйко = СЕИ.Добавить();
				СтрЕИАйко.Название = Элемент.name;
				СтрЕИАйко.Ид = ВРег(Элемент.id);
			КонецЦикла;
		Иначе
			ЗаписатьВЛог("Список единиц измерения пуст.");
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ЗагрузитьСкладыИзАйко()
	СкладыАйкоМассив = ПолучитьДанныеИзIIKO("entity/stores");	
	Если СкладыАйкоМассив <> Неопределено Тогда
		Если СкладыАйкоМассив.Количество()>0 Тогда
			СкладыАйко = ТабСкладыАйко;
			СкладыАйко.Очистить();
			Для каждого Элемент Из СкладыАйкоМассив Цикл
				СтрСкладАйко = СкладыАйко.Добавить();
				СтрСкладАйко.КодАйко   = Элемент.code;
				СтрСкладАйко.СкладАйко = Элемент.name;
				СтрСкладАйко.ИдАйко	   = Элемент.id;
			КонецЦикла;
		Иначе
			ЗаписатьВЛог("Список складов пуст.");
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ЗагрузитьПоставщиковИзАйко()
	ПоставщикиАйкоМассив = ПолучитьДанныеИзIIKO("entity/suppliers");	
	Если ПоставщикиАйкоМассив <> Неопределено Тогда
		Если ПоставщикиАйкоМассив.Количество()>0 Тогда
			ПоставщикиАйко = ТабПоставщикиАйко;
			ПоставщикиАйко.Очистить();
			Для каждого Элемент Из ПоставщикиАйкоМассив Цикл
				СтрПоставщикАйко = ПоставщикиАйко.Добавить();
				СтрПоставщикАйко.КодАйко   	   = Элемент.vendor_code;
				СтрПоставщикАйко.ПоставщикАйко = Элемент.name;
				СтрПоставщикАйко.ИдАйко 	   = Элемент.id;
			КонецЦикла;
			ПоставщикиАйко.Сортировать("ПоставщикАйко");
		Иначе
			ЗаписатьВЛог("Список поставщиков пуст.");	
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ЗагрузитьПодразделенияИзАйко()
	ПодразделенияАйкоМассив = ПолучитьДанныеИзIIKO("entity/departments");
	Если ПодразделенияАйкоМассив <> Неопределено Тогда 
		Если ПодразделенияАйкоМассив.Количество() > 0 Тогда 
			ПодразделенияАйко = ТабПодразделенияАйко;
			ПодразделенияАйко.Очистить();
			Для каждого Элемент Из ПодразделенияАйкоМассив Цикл
				СтрПодразделениеАйко = ПодразделенияАйко.Добавить();
				СтрПодразделениеАйко.КодАйко 			= Элемент.code;
				СтрПодразделениеАйко.ПодразделениеАйко 	= Элемент.name;
				СтрПодразделениеАйко.ИдАйко 			= Элемент.id;
			КонецЦикла;
			ПодразделенияАйко.Сортировать("ПодразделениеАйко");
		Иначе
			ЗаписатьВЛог("Список подразделений пуст.");
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ЗагрузитьСтатьиЗатратИзАйко()
	СтатьиЗатратАйкоМассив = ПолучитьДанныеИзIIKO("entity/expenseAccounts");
КонецПроцедуры

&НаКлиенте
Процедура ПроверитьЗаполнениеТаблиц()
	Если ТабНоменклатураАйко.Количество()=0 И
		 ТабГруппыНоменклатурыАйко.Количество()=0 И
		 ТабЕдиницыИзмеренияАйко.Количество()=0 И
		 ТабСкладыАйко.Количество()=0 И
		 ТабПоставщикиАйко.Количество()=0 И
		 ТабПодразделенияАйко.Количество()=0 Тогда
		 
		 ЗаписатьВЛог("Справочники IIKO не заполнены. Проверьте параметры подключения.");
	КонецЕсли;
КонецПроцедуры

// ТАБЛИЦЫ СОПОСТАВЛЕНИЯ
&НаСервереБезКонтекста
Процедура ОбъединитьМассивы(Массив1, Массив2)
	Для каждого Элемент Из Массив2 Цикл Массив1.Добавить(Элемент) КонецЦикла;
КонецПроцедуры

&НаСервереБезКонтекста
Функция СвернутьМассив(ИсходныйМассив)
	НовыйМассив = Новый Массив; Соответствие = Новый Соответствие;
	Для каждого ЭлементМассива Из ИсходныйМассив Цикл Соответствие.Вставить(ЭлементМассива) КонецЦикла;
	Для каждого КлючИЗначение Из Соответствие Цикл НовыйМассив.Добавить(КлючИЗначение.Ключ) КонецЦикла;
	Возврат НовыйМассив;
КонецФункции

&НаСервере
Процедура ЗагрузитьНоменклатуруИзДокументовНаСервере()
	ЗапросНоменклатуры = Новый Запрос("ВЫБРАТЬ РАЗЛИЧНЫЕ
	                                  |	ВозвратТоваровПоставщикуТовары.Номенклатура КАК Номенклатура
	                                  |ИЗ
	                                  |	Документ.ВозвратТоваровПоставщику.Товары КАК ВозвратТоваровПоставщикуТовары
	                                  |ГДЕ
	                                  |	ВозвратТоваровПоставщикуТовары.Ссылка В(&СписокДокументов)
	                                  |
	                                  |ОБЪЕДИНИТЬ
	                                  |
	                                  |ВЫБРАТЬ РАЗЛИЧНЫЕ
	                                  |	РеализацияТоваровУслугТовары.Номенклатура
	                                  |ИЗ
	                                  |	Документ.РеализацияТоваровУслуг.Товары КАК РеализацияТоваровУслугТовары
	                                  |ГДЕ
	                                  |	РеализацияТоваровУслугТовары.Ссылка В(&СписокДокументов)
	                                  |
	                                  |ОБЪЕДИНИТЬ
	                                  |
	                                  |ВЫБРАТЬ РАЗЛИЧНЫЕ
	                                  |	ПоступлениеТоваровУслугТовары.Номенклатура
	                                  |ИЗ
	                                  |	Документ.ПоступлениеТоваровУслуг.Товары КАК ПоступлениеТоваровУслугТовары
	                                  |ГДЕ
	                                  |	ПоступлениеТоваровУслугТовары.Ссылка В(&СписокДокументов)
	                                  |
	                                  |ОБЪЕДИНИТЬ
	                                  |
	                                  |ВЫБРАТЬ РАЗЛИЧНЫЕ
	                                  |	УстановкаЦенНоменклатурыТовары.Номенклатура
	                                  |ИЗ
	                                  |	Документ.УстановкаЦенНоменклатуры.Товары КАК УстановкаЦенНоменклатурыТовары
	                                  |ГДЕ
	                                  |	УстановкаЦенНоменклатурыТовары.Ссылка В(&СписокДокументов)
	                                  |
	                                  |ОБЪЕДИНИТЬ
	                                  |
	                                  |ВЫБРАТЬ РАЗЛИЧНЫЕ
	                                  |	ПеремещениеТоваровТовары.Номенклатура
	                                  |ИЗ
	                                  |	Документ.ПеремещениеТоваров.Товары КАК ПеремещениеТоваровТовары
	                                  |ГДЕ
	                                  |	ПеремещениеТоваровТовары.Ссылка В(&СписокДокументов)");
	ЗапросНоменклатуры.УстановитьПараметр("СписокДокументов", ТабДокументыВыгрузки.Выгрузить().ВыгрузитьКолонку("Документ1С"));
	МассивНоменклатуры = ЗапросНоменклатуры.Выполнить().Выгрузить().ВыгрузитьКолонку("Номенклатура");
	Для Каждого ЭлементМассива Из МассивНоменклатуры Цикл
		нСтрока = ТабНоменклатура.Добавить();
		нСтрока.Номенклатура1С = ЭлементМассива;
		нСтрока.Код1С = ЭлементМассива.Код;
	КонецЦикла;
КонецПроцедуры

&НаСервере
Процедура ЗагрузитьСкладыИзДокументовНаСервере()
	ТЗРезультат = Новый ТаблицаЗначений;
	ТЗРезультат.Колонки.Добавить("Склад1С");
	ЗапросСкладов = Новый Запрос("ВЫБРАТЬ РАЗЛИЧНЫЕ
	                             |	ВозвратТоваровПоставщику.Склад КАК Склад
	                             |ИЗ
	                             |	Документ.ВозвратТоваровПоставщику КАК ВозвратТоваровПоставщику
	                             |ГДЕ
	                             |	ВозвратТоваровПоставщику.Ссылка В(&СписокДокументов)
	                             |
	                             |ОБЪЕДИНИТЬ
	                             |
	                             |ВЫБРАТЬ РАЗЛИЧНЫЕ
	                             |	РеализацияТоваровУслуг.Склад
	                             |ИЗ
	                             |	Документ.РеализацияТоваровУслуг КАК РеализацияТоваровУслуг
	                             |ГДЕ
	                             |	РеализацияТоваровУслуг.Ссылка В(&СписокДокументов)
	                             |
	                             |ОБЪЕДИНИТЬ
	                             |
	                             |ВЫБРАТЬ РАЗЛИЧНЫЕ
	                             |	ПоступлениеТоваровУслуг.Склад
	                             |ИЗ
	                             |	Документ.ПоступлениеТоваровУслуг КАК ПоступлениеТоваровУслуг
	                             |ГДЕ
	                             |	ПоступлениеТоваровУслуг.Ссылка В(&СписокДокументов)
	                             |
	                             |ОБЪЕДИНИТЬ
	                             |
	                             |ВЫБРАТЬ РАЗЛИЧНЫЕ
	                             |	ПеремещениеТоваров.СкладОтправитель
	                             |ИЗ
	                             |	Документ.ПеремещениеТоваров КАК ПеремещениеТоваров
	                             |ГДЕ
	                             |	ПеремещениеТоваров.Ссылка В(&СписокДокументов)
	                             |
	                             |ОБЪЕДИНИТЬ
	                             |
	                             |ВЫБРАТЬ РАЗЛИЧНЫЕ
	                             |	ПеремещениеТоваров.СкладПолучатель
	                             |ИЗ
	                             |	Документ.ПеремещениеТоваров КАК ПеремещениеТоваров
	                             |ГДЕ
	                             |	ПеремещениеТоваров.Ссылка В(&СписокДокументов)");
	ЗапросСкладов.УстановитьПараметр("СписокДокументов", ТабДокументыВыгрузки.Выгрузить().ВыгрузитьКолонку("Документ1С"));
	МассивСкладов = ЗапросСкладов.Выполнить().Выгрузить().ВыгрузитьКолонку("Склад");
	Для Н=1 По МассивСкладов.Количество() Цикл ТЗРезультат.Добавить(); КонецЦикла;	
	ТЗРезультат.ЗагрузитьКолонку(МассивСкладов, "Склад1С");
	ТабСклады.Загрузить(ТЗРезультат);
КонецПроцедуры

&НаСервере
Процедура ЗагрузитьПоставщиковИзДокументовНаСервере()
	ЗапросПоставщиков = Новый Запрос("ВЫБРАТЬ РАЗЛИЧНЫЕ
	                                 |	ВозвратТоваровПоставщику.Контрагент КАК Контрагент
	                                 |ИЗ
	                                 |	Документ.ВозвратТоваровПоставщику КАК ВозвратТоваровПоставщику
	                                 |ГДЕ
	                                 |	ВозвратТоваровПоставщику.Ссылка В(&СписокДокументов)
	                                 |
	                                 |ОБЪЕДИНИТЬ
	                                 |
	                                 |ВЫБРАТЬ РАЗЛИЧНЫЕ
	                                 |	РеализацияТоваровУслуг.Контрагент
	                                 |ИЗ
	                                 |	Документ.РеализацияТоваровУслуг КАК РеализацияТоваровУслуг
	                                 |ГДЕ
	                                 |	РеализацияТоваровУслуг.Ссылка В(&СписокДокументов)
	                                 |
	                                 |ОБЪЕДИНИТЬ
	                                 |
	                                 |ВЫБРАТЬ РАЗЛИЧНЫЕ
	                                 |	ПоступлениеТоваровУслуг.Контрагент
	                                 |ИЗ
	                                 |	Документ.ПоступлениеТоваровУслуг КАК ПоступлениеТоваровУслуг
	                                 |ГДЕ
	                                 |	ПоступлениеТоваровУслуг.Ссылка В(&СписокДокументов)");	
	ЗапросПоставщиков.УстановитьПараметр("СписокДокументов", ТабДокументыВыгрузки.Выгрузить().ВыгрузитьКолонку("Документ1С"));
	МассивПоставщиков = ЗапросПоставщиков.Выполнить().Выгрузить().ВыгрузитьКолонку("Контрагент");
	ТЗПоставщиков = Новый ТаблицаЗначений;
	ТЗПоставщиков.Колонки.Добавить("Контрагент1С");
	Для Н=1 По МассивПоставщиков.Количество() Цикл ТЗПоставщиков.Добавить(); КонецЦикла;
	ТЗПоставщиков.ЗагрузитьКолонку(МассивПоставщиков, "Контрагент1С");
	ТабПоставщики.Загрузить(ТЗПоставщиков);
КонецПроцедуры

&НаСервере
Процедура ЗагрузитьПодразделенияИзДокументовНаСервере()
	Для каждого Элемент Из ТабДокументыВыгрузки Цикл
		Если ТипЗнч(Элемент.Документ1С)=Тип("ДокументСсылка.УстановкаЦенНоменклатуры") Тогда
			нПрейскурант = ТабПрейскурант.Добавить();
			нПрейскурант.Документ1С = Элемент.Документ1С;
		КонецЕсли;
	КонецЦикла;
КонецПроцедуры

&НаСервере
Процедура ЗагрузитьТаблицыИзДокументовНаСервере()
	ЗагрузитьНоменклатуруИзДокументовНаСервере();
	ЗагрузитьСкладыИзДокументовНаСервере();
	ЗагрузитьПоставщиковИзДокументовНаСервере();
	ЗагрузитьПодразделенияИзДокументовНаСервере();
КонецПроцедуры

&НаСервере
Функция ПолучитьКодIDАйкоНоменклатуры(НоменклатураСсылка)
	нСтроки = ТабНоменклатура.НайтиСтроки(Новый Структура("Номенклатура1С", НоменклатураСсылка));	
	Если нСтроки.Количество()=0 Тогда
		ЗаписатьВЛог("Номенклатура "+НоменклатураСсылка+" не найдена в таблице сопоставления.");
		Возврат Неопределено;	
	Иначе
		НоменклатураАйко = нСтроки[0].НоменклатураАйко;
		нСтроки = ТабНоменклатураАйко.НайтиСтроки(Новый Структура("НоменклатураАйко", НоменклатураАйко));
		Если нСтроки.Количество()=0 Тогда
			ЗаписатьВЛог("Номенклатура IIKO "+НоменклатураАйко+" не найдена в справочнике номенклатуры.");
			Возврат Неопределено;
		Иначе
			Возврат Новый Структура("Ид, КодАйко", нСтроки[0].Ид, нСтроки[0].КодАйко);	
		КонецЕсли;
	КонецЕсли;
КонецФункции

&НаСервере
Функция ПолучитьИДЕдиницыИзмеренияПоСсылке(НоменклатураСсылка)
	НоменклатураОбъект = НоменклатураСсылка.ПолучитьОбъект();
	нЕИАйко = ТабЕдиницыИзмеренияАйко.НайтиСтроки(Новый Структура("Название", НоменклатураОбъект.ЕдиницаИзмерения.Наименование));
	Если нЕИАйко.Количество() Тогда
		Возврат нЕИАйко[0].Ид;
	Иначе
		ЗаписатьВЛог("Не удалось найти единицу измерения Айко");
		Возврат Неопределено;
	КонецЕсли;
КонецФункции

&НаСервере
Функция ПолучитьИдПоставщикаПоСсылке(КонтрагентСсылка)
	нСтроки = ТабПоставщики.НайтиСтроки(Новый Структура("Контрагент1С", КонтрагентСсылка));	
	Если нСтроки.Количество()=0 Тогда
		ЗаписатьВЛог("Контрагент "+КонтрагентСсылка+" не найден в таблице сопоставления.");
		Возврат Неопределено;
	Иначе
		ПоставщикАйко = нСтроки[0].ПоставщикАйко;
		нСтроки = ТабПоставщикиАйко.НайтиСтроки(Новый Структура("ПоставщикАйко", ПоставщикАйко));
		Если нСтроки.Количество()=0 Тогда
			ЗаписатьВЛог("Поставщик IIKO "+ПоставщикАйко+" не найден в справочнике поставщиков.");
			Возврат Неопределено;
		Иначе
			Возврат нСтроки[0].ИдАйко;	
		КонецЕсли;
	КонецЕсли;
КонецФункции

&НаСервере
Функция ПолучитьИдСкладаПоСсылке(СкладСсылка)
	нСтроки = ТабСклады.НайтиСтроки(Новый Структура("Склад1С", СкладСсылка));	
	Если нСтроки.Количество()=0 Тогда
		ЗаписатьВЛог("Склад "+СкладСсылка+" не найден в таблице сопоставления.");
		Возврат Неопределено;
	Иначе
		СкладАйко = нСтроки[0].СкладАйко;
		нСтроки = ТабСкладыАйко.НайтиСтроки(Новый Структура("СкладАйко", СкладАйко));
		Если нСтроки.Количество()=0 Тогда
			ЗаписатьВЛог("Склад IIKO "+СкладАйко+" не найден в справочнике складов.");
			Возврат Неопределено;
		Иначе
			Возврат нСтроки[0].ИдАйко;	
		КонецЕсли;
	КонецЕсли;	
КонецФункции

&НаСервере 
Функция ПолучитьМассивТоваровНакладной(ДокОбъект, ИдСклада)
	МассивТоваров = Новый Массив; 
	Для Каждого Товар Из ДокОбъект.Товары Цикл
		идЕИ = ПолучитьИДЕдиницыИзмеренияПоСсылке(Товар.Номенклатура);
	
		СтруктураНоменклатурыАйко = ПолучитьКодIDАйкоНоменклатуры(Товар.Номенклатура);
		Если СтруктураНоменклатурыАйко = Неопределено Тогда
			Возврат Неопределено;
		КонецЕсли;
		
		Сумма 		= Товар.Цена*Товар.Количество;
		СуммаБезНДС = Сумма - Товар.СуммаНДС;
		ПроцентНДС  = Окр(Товар.СуммаНДС/СуммаБезНДС*100);
		
		СтруктураТовара = Новый Структура;
		СтруктураТовара.Вставить("store", 			ИдСклада);
		СтруктураТовара.Вставить("code", 			СтруктураНоменклатурыАйко.КодАйко);
		СтруктураТовара.Вставить("price", 			Формат(Товар.Цена, 		 ФорматнаяСтрокаЧисел));
		СтруктураТовара.Вставить("sum", 			Формат(Сумма, 			 ФорматнаяСтрокаЧисел));
		СтруктураТовара.Вставить("ndsPercent", 		Формат(ПроцентНДС, 	 	 ФорматнаяСтрокаЧисел));
		СтруктураТовара.Вставить("sumWithoutNds", 	Формат(СуммаБезНДС, 	 ФорматнаяСтрокаЧисел));
		СтруктураТовара.Вставить("amount", 			Формат(Товар.Количество, ФорматнаяСтрокаЧисел));
		СтруктураТовара.Вставить("amountUnit", 		идЕИ);
		СтруктураТовара.Вставить("product", 		СтруктураНоменклатурыАйко.Ид);
		
		МассивТоваров.Добавить(СтруктураТовара);
	КонецЦикла;
			
	Если МассивТоваров.Количество()=0 Тогда
		ЗаписатьВЛог("В документе " + ДокОбъект + " количество товаров равно 0");
		Возврат Неопределено;
	Иначе
		Возврат МассивТоваров;
	КонецЕсли;	
КонецФункции

&НаСервере
Функция СформироватьСтруктуруНоменклатуры(НоменклатураСсылка)
	НомОбъект = НоменклатураСсылка.ПолучитьОбъект();
	
	нЕИ = ТабЕдиницыИзмеренияАйко.НайтиСтроки(Новый Структура("Название", НомОбъект.ЕдиницаИзмерения.Наименование));
	Если нЕИ.Количество()>0 Тогда
		ИдЕИ = нЕИ[0].Ид;
	Иначе
		ЗаписатьВЛог("Единица измерения не найдена по наименованию");
		Возврат Неопределено;
	КонецЕсли;
	
	частиГруппы = СтрРазделить(СпрГруппаНоменклатуры, "]");
	нГр = ТабГруппыНоменклатурыАйко.НайтиСтроки(Новый Структура("Код", Сред(частиГруппы[0], 2)));
	Если нГр.Количество()>0 Тогда
		ИдГр = нГр[0].Ид;
	Иначе
		ЗаписатьВЛог("Группа номенклатуры не найдена по коду");
		Возврат Неопределено;
	КонецЕсли;
	
	СтруктураНоменклатуры = Новый Структура;
	СтруктураНоменклатуры.Вставить("customValue", 	НомОбъект.Наименование);
	СтруктураНоменклатуры.Вставить("type", 			СпрТипНоменклатуры);
	СтруктураНоменклатуры.Вставить("parent", 		ИдГр);
	СтруктураНоменклатуры.Вставить("num", 			Транслит(НомОбъект.Код));
	СтруктураНоменклатуры.Вставить("mainUnit", 		ИдЕИ);
	
	Возврат СтруктураНоменклатуры;
КонецФункции

&НаСервере
Функция СформироватьСтруктуруНакладнойИзДокумента1С(ДокументСсылка)
	ДокОбъект = ДокументСсылка.ПолучитьОбъект();
	
	ИдПоставщика = ПолучитьИдПоставщикаПоСсылке(ДокОбъект.Контрагент);
	ИдСклада 	 = ПолучитьИдСкладаПоСсылке(ДокОбъект.Склад);
		
	ТоварыНакладной = ПолучитьМассивТоваровНакладной(ДокОбъект, ИдСклада);
	Если ТоварыНакладной = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	СтруктураНакладной = Новый Структура;
	СтруктураНакладной.Вставить("dateIncoming", ДокОбъект.Дата);
	СтруктураНакладной.Вставить("supplier", 	ИдПоставщика);
	СтруктураНакладной.Вставить("defaultStore", ИдСклада); 
	СтруктураНакладной.Вставить("comment",		ДокОбъект.Комментарий);
	СтруктураНакладной.Вставить("items",		ТоварыНакладной);
	
	Если ТипЗнч(ДокументСсылка) = Тип("ДокументСсылка.ПоступлениеТоваровУслуг") Тогда
		СтруктураНакладной.Вставить("incomingDocumentNumber", ДокОбъект.НомерВходящегоДокумента);	
	КонецЕсли;
	
	Возврат СтруктураНакладной;	
КонецФункции

&НаСервере
Функция СформироватьСтруктуруПриказаИзДокумента1С(ДокументСсылка)
	ДокОбъект = ДокументСсылка.ПолучитьОбъект();
	
	нСтроки = ТабПрейскурант.НайтиСтроки(Новый Структура("Документ1С", ДокументСсылка));
	Если нСтроки.Количество() > 0 Тогда
		dateTo = нСтроки[0].ДатаОкончания;
		КодПодразделенияАйко = нСтроки[0].КодПодразделенияАйко;
	Иначе
		Возврат Неопределено;
	КонецЕсли;
	
	нСтроки = ТабПодразделенияАйко.НайтиСтроки(Новый Структура("КодАйко", КодПодразделенияАйко));
	Если нСтроки.Количество() > 0 Тогда
		ИдПодразделенияАйко = нСтроки[0].ИдАйко;
	Иначе
		Возврат Неопределено;
	КонецЕсли;	
	
	МассивТоваров = Новый Массив;
	Для каждого Товар Из ДокОбъект.Товары Цикл
		СтруктураНоменклатурыАйко = ПолучитьКодIDАйкоНоменклатуры(Товар.Номенклатура);
		Если СтруктураНоменклатурыАйко = Неопределено Тогда
			Возврат Неопределено;
		КонецЕсли;
		
		СтруктураТовара = Новый Структура;
		СтруктураТовара.Вставить("department",	ИдПодразделенияАйко);
		СтруктураТовара.Вставить("product", 	СтруктураНоменклатурыАйко.Ид);
		СтруктураТовара.Вставить("newPrice",	Формат(Товар.Цена, ФорматнаяСтрокаЧисел));
		
		МассивТоваров.Добавить(СтруктураТовара);
	КонецЦикла;
	
	Если МассивТоваров.Количество()=0 Тогда
		ЗаписатьВЛог("В документе " + ДокОбъект + " количество товаров равно 0");
		Возврат Неопределено;
	КонецЕсли;
	
	СтруктураПриказа = Новый Структура;
	СтруктураПриказа.Вставить("shortName", 		"Обновление прейскуранта");
	СтруктураПриказа.Вставить("dateIncoming", 	ДокОбъект.Дата);
	СтруктураПриказа.Вставить("dateTo", 		dateTo);
	СтруктураПриказа.Вставить("comment", 		ДокОбъект.Комментарий);
	СтруктураПриказа.Вставить("items", 			МассивТоваров);
	
	Возврат СтруктураПриказа;
КонецФункции

&НаСервере
Функция СформироватьСтруктуруПеремещенияИзДокумента1С(ДокументСсылка)
	ДокОбъект = ДокументСсылка.ПолучитьОбъект();
	
	ИдСкладаОтправителя = ПолучитьИдСкладаПоСсылке(ДокОбъект.СкладОтправитель);
	ИдСкладаПолучателя  = ПолучитьИдСкладаПоСсылке(ДокОбъект.СкладПолучатель);
	
	МассивТоваров = Новый Массив; 
	Для Каждого Товар Из ДокОбъект.Товары Цикл
		идЕИ = ПолучитьИДЕдиницыИзмеренияПоСсылке(Товар.Номенклатура);
	
		СтруктураНоменклатурыАйко = ПолучитьКодIDАйкоНоменклатуры(Товар.Номенклатура);
		Если СтруктураНоменклатурыАйко = Неопределено Тогда
			Возврат Неопределено;
		КонецЕсли;
		
		СтруктураТовара = Новый Структура;
		СтруктураТовара.Вставить("amount", 			Формат(Товар.Количество, ФорматнаяСтрокаЧисел));
		СтруктураТовара.Вставить("amountUnit", 		идЕИ);
		СтруктураТовара.Вставить("product", 		СтруктураНоменклатурыАйко.Ид);
		
		МассивТоваров.Добавить(СтруктураТовара);
	КонецЦикла;
			
	Если МассивТоваров.Количество()=0 Тогда
		ЗаписатьВЛог("В документе " + ДокОбъект + " количество товаров равно 0");
		Возврат Неопределено;
	КонецЕсли;
	
	СтруктураПеремещения = Новый Структура;
	СтруктураПеремещения.Вставить("dateIncoming", 	ДокОбъект.Дата);
	СтруктураПеремещения.Вставить("storeFrom", 		ИдСкладаОтправителя);
	СтруктураПеремещения.Вставить("storeTo", 		ИдСкладаПолучателя);
	СтруктураПеремещения.Вставить("comment", 		ДокОбъект.Комментарий);
	СтруктураПеремещения.Вставить("items", 			МассивТоваров);
	
	Возврат СтруктураПеремещения;
КонецФункции

&НаСервере
Процедура ПередатьОбъектВАйко(СтруктураОбъекта, ТипОбъекта, ИмяОбъекта)
	СтруктураОтвета = ПолучитьДанныеИзIIKO(ТипОбъекта+"/"+ИмяОбъекта, "POST", ПреобразоватьСтруктуруВJSONСтроку(СтруктураОбъекта));	
	Если СтруктураОтвета<>Неопределено Тогда
		
		Если ТипОбъекта = "document" Тогда
			Если СтруктураОтвета.Свойство("success") Тогда
				Если СтруктураОтвета.Свойство("valid") Тогда
					Если СтруктураОтвета.success="true" И СтруктураОтвета.valid="true" Тогда
						ЗаписатьВЛог("Документ №"+СтруктураОтвета.documentNumber+" создан в IIKO");
					Иначе
						ЗаписатьВЛог("Ошибка при создании документа: "+СтруктураОтвета.errorString);
					КонецЕсли;
				КонецЕсли;
				
				Если СтруктураОтвета.success="false" Тогда
					ЗаписатьВЛог("Ошибка при создании документа: "+СтруктураОтвета.errorString);	
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
		
		Если ТипОбъекта = "entity" Тогда
			Если СтруктураОтвета.Свойство("success") Тогда
				Если СтруктураОтвета.Свойство("resultStatus") Тогда
					Если СтруктураОтвета.success="true" И СтруктураОтвета.resultStatus="SUCCESS" Тогда
						ЗаписатьВЛог("Номенклатура "+СтруктураОбъекта.customValue+" создана в IIKO. ["+СтруктураОтвета.returnValue+"]");
					Иначе
						ЗаписатьВЛог("Ошибка при создании номенклатуры: "+СтруктураОтвета.errorString);
					КонецЕсли;
				КонецЕсли;
				
				Если СтруктураОтвета.success="false" Тогда
					ЗаписатьВЛог("Ошибка при создании номенклатуры: "+СтруктураОтвета.errorString);	
				КонецЕсли;
			КонецЕсли;	
		КонецЕсли;
		
		Если СтруктураОтвета.Свойство("errorString") Тогда
			Если Не ПустаяСтрока(СтруктураОтвета.errorString) Тогда
				ЗаписатьВЛог("Ошибка сервиса: "+СтруктураОтвета.errorString);
			КонецЕсли;
		КонецЕсли;
	Иначе
		ЗаписатьВЛог("Ошибка при получении данных из сервиса");
	КонецЕсли;
КонецПроцедуры

&НаСервере
Процедура ПередатьВАйкоНаСервере(ДокументСсылка)	
	Если ТипЗнч(ДокументСсылка)=Тип("ДокументСсылка.ВозвратТоваровПоставщику") Тогда
		СтруктураНакладной = СформироватьСтруктуруНакладнойИзДокумента1С(ДокументСсылка);
		ПередатьОбъектВАйко(СтруктураНакладной, "document", "ReturnedInvoice");
	ИначеЕсли ТипЗнч(ДокументСсылка)=Тип("ДокументСсылка.ПоступлениеТоваровУслуг") Тогда
		СтруктураНакладной = СформироватьСтруктуруНакладнойИзДокумента1С(ДокументСсылка);
		ПередатьОбъектВАйко(СтруктураНакладной, "document", "IncomingInvoice");
	ИначеЕсли ТипЗнч(ДокументСсылка)=Тип("ДокументСсылка.РеализацияТоваровУслуг") Тогда
		СтруктураНакладной = СформироватьСтруктуруНакладнойИзДокумента1С(ДокументСсылка);
		ПередатьОбъектВАйко(СтруктураНакладной, "document", "OutgoingInvoice");
	ИначеЕсли ТипЗнч(ДокументСсылка)=Тип("ДокументСсылка.УстановкаЦенНоменклатуры") Тогда
		СтруктураПриказа = СформироватьСтруктуруПриказаИзДокумента1С(ДокументСсылка);
		ПередатьОбъектВАйко(СтруктураПриказа, "document", "TreeMenuChangeDocument");
	ИначеЕсли ТипЗнч(ДокументСсылка)=Тип("ДокументСсылка.ПеремещениеТоваров") Тогда
		СтруктураПриказа = СформироватьСтруктуруПеремещенияИзДокумента1С(ДокументСсылка);
		ПередатьОбъектВАйко(СтруктураПриказа, "document", "InternalTransfer");
	Иначе
		ЗаписатьВЛог("Неизвестный тип документа "+ДокументСсылка);
	КонецЕсли;	
КонецПроцедуры

&НаСервере
Функция ПолучитьСписокЕИАйко()
	Возврат ТабЕдиницыИзмеренияАйко.Выгрузить().ВыгрузитьКолонку("Название");
КонецФункции

&НаСервере
Функция ПоместитьНоменклатуруАйкоВХранилищеНаСервере(УИД)
	Возврат ПоместитьВоВременноеХранилище(ТабНоменклатураАйко.Выгрузить(), УИД);
КонецФункции

&НаСервере
Функция ПоместитьСкладыАйкоВХранилищеНаСервере(УИД)
	Возврат ПоместитьВоВременноеХранилище(ТабСкладыАйко.Выгрузить(), УИД);
КонецФункции

&НаСервере
Функция ПоместитьПоставщиковАйкоВХранилищеНаСервере(УИД)
	Возврат ПоместитьВоВременноеХранилище(ТабПоставщикиАйко.Выгрузить(), УИД);
КонецФункции

&НаСервере
Функция ПоместитьПодразделенияАйкоВХранилищеНаСервере(УИД)
	Возврат ПоместитьВоВременноеХранилище(ТабПодразделенияАйко.Выгрузить(), УИД);
КонецФункции

&НаСервере
Функция ПоместитьТаблицуАйкоВХранилищеНаСервере(ИмяТаблицыДанныхАйко, УИД)
	Возврат ПоместитьВоВременноеХранилище(ЭтаФорма[ИмяТаблицыДанныхАйко].Выгрузить(), УИД);
КонецФункции

&НаКлиенте
Процедура ТабНоменклатура1СВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)	
	Если Поле.Имя <> "ТабНоменклатура1СНоменклатура1С" И
		 Поле.Имя <> "ТабНоменклатура1СЕИАйко" Тогда
		
		СтандартнаяОбработка = Ложь;
		
		ТД = Элементы.ТабНоменклатура1С.ТекущиеДанные;
		АдресНоменклатурыАйко = ПоместитьНоменклатуруАйкоВХранилищеНаСервере(ЭтаФорма.УникальныйИдентификатор);
		
		ДополнительныеПараметры = Новый Структура;
		ДополнительныеПараметры.Вставить("ТипВыбора", "ВыборНоменклатурыАйко");
		ДополнительныеПараметры.Вставить("АдресТаблицыДанныхАйко", АдресНоменклатурыАйко);
		
		ОткрытьФорму("ВнешняяОбработка.ВыгрузкаДокументовВIIKO.Форма.ФормаДанныхАйко", ДополнительныеПараметры, ЭтаФорма);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ТабСкладыВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	Если Поле.Имя <> "ТабСкладыСклад1С" Тогда
		
		СтандартнаяОбработка = Ложь;
		
		ТД = Элементы.ТабСклады.ТекущиеДанные;
		АдресСкладовАйко = ПоместитьСкладыАйкоВХранилищеНаСервере(ЭтаФорма.УникальныйИдентификатор);
		
		ДополнительныеПараметры = Новый Структура;
		ДополнительныеПараметры.Вставить("ТипВыбора", "ВыборСкладаАйко");
		ДополнительныеПараметры.Вставить("АдресТаблицыДанныхАйко", АдресСкладовАйко);
		
		ОткрытьФорму("ВнешняяОбработка.ВыгрузкаДокументовВIIKO.Форма.ФормаДанныхАйко", ДополнительныеПараметры, ЭтаФорма);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ТабПоставщикиВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	Если Поле.Имя <> "ТабПоставщикиКонтрагент1С" Тогда
		
		СтандартнаяОбработка = Ложь;
		
		ТД = Элементы.ТабПоставщики.ТекущиеДанные;
		АдресПоставщиковАйко = ПоместитьПоставщиковАйкоВХранилищеНаСервере(ЭтаФорма.УникальныйИдентификатор);
		
		ДополнительныеПараметры = Новый Структура;
		ДополнительныеПараметры.Вставить("ТипВыбора", "ВыборПоставщикаАйко");
		ДополнительныеПараметры.Вставить("АдресТаблицыДанныхАйко", АдресПоставщиковАйко);
		
		ОткрытьФорму("ВнешняяОбработка.ВыгрузкаДокументовВIIKO.Форма.ФормаДанныхАйко", ДополнительныеПараметры, ЭтаФорма);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ТабПрейскурантВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	Если Поле.Имя <> "ТабПрейскурантДатаОкончания" Тогда
		
		СтандартнаяОбработка = Ложь;
		
		ТД = Элементы.ТабПрейскурант.ТекущиеДанные;
		АдресПодразделенийАйко = ПоместитьПодразделенияАйкоВХранилищеНаСервере(ЭтаФорма.УникальныйИдентификатор);
		
		ДополнительныеПараметры = Новый Структура;
		ДополнительныеПараметры.Вставить("ТипВыбора", "ВыборПодразделенияАйко");
		ДополнительныеПараметры.Вставить("АдресТаблицыДанныхАйко", АдресПодразделенийАйко);
		
		ОткрытьФорму("ВнешняяОбработка.ВыгрузкаДокументовВIIKO.Форма.ФормаДанныхАйко", ДополнительныеПараметры, ЭтаФорма);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура СпрГруппаНоменклатурыНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	АдресГруппНоменклатурыАйко = ПоместитьТаблицуАйкоВХранилищеНаСервере("ТабГруппыНоменклатурыАйко", ЭтаФорма.УникальныйИдентификатор);
		
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("ТипВыбора", "ВыборГруппыНоменклатурыАйко");
	ДополнительныеПараметры.Вставить("АдресТаблицыДанныхАйко", АдресГруппНоменклатурыАйко);
	
	ОткрытьФорму("ВнешняяОбработка.ВыгрузкаДокументовВIIKO.Форма.ФормаДанныхАйко", ДополнительныеПараметры, ЭтаФорма);
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	Если ИмяСобытия="ВыборНоменклатурыАйко"  Тогда
        Если ЗначениеЗаполнено(Параметр) Тогда
			СтруктураВыбранного = ПолучитьИзВременногоХранилища(Параметр);
			ТД = Элементы.ТабНоменклатура1С.ТекущиеДанные;
			Если ТД <> Неопределено Тогда
				ТД.КодАйко 			= СтруктураВыбранного.КодАйко;
				ТД.НоменклатураАйко = СтруктураВыбранного.НаименованиеАйко;
			КонецЕсли;
        КонецЕсли;        
	КонецЕсли;
	
	Если ИмяСобытия="ВыборСкладаАйко"  Тогда
        Если ЗначениеЗаполнено(Параметр) Тогда
			СтруктураВыбранного = ПолучитьИзВременногоХранилища(Параметр);
			ТД = Элементы.ТабСклады.ТекущиеДанные;
			Если ТД<>Неопределено Тогда
				ТД.КодАйко 	 = СтруктураВыбранного.КодАйко;
				ТД.СкладАйко = СтруктураВыбранного.НаименованиеАйко;
			КонецЕсли;
        КонецЕсли;        
	КонецЕсли;
	
	Если ИмяСобытия="ВыборПоставщикаАйко" Тогда
		Если ЗначениеЗаполнено(Параметр) Тогда
			СтруктураВыбранного = ПолучитьИзВременногоХранилища(Параметр);	
			ТД = Элементы.ТабПоставщики.ТекущиеДанные;
			Если ТД<>Неопределено Тогда
				ТД.КодАйко 		 = СтруктураВыбранного.КодАйко;
				ТД.ПоставщикАйко = СтруктураВыбранного.НаименованиеАйко;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	Если ИмяСобытия="ВыборПодразделенияАйко" Тогда
		Если ЗначениеЗаполнено(Параметр) Тогда
			СтруктураВыбранного = ПолучитьИзВременногоХранилища(Параметр);	
			ТД = Элементы.ТабПрейскурант.ТекущиеДанные;
			Если ТД<>Неопределено Тогда
				ТД.КодПодразделенияАйко = СтруктураВыбранного.КодАйко;
				ТД.ПодразделениеАйко 	= СтруктураВыбранного.НаименованиеАйко;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	Если ИмяСобытия="ВыборГруппыНоменклатурыАйко" Тогда
		Если ЗначениеЗаполнено(Параметр) Тогда
			СтруктураВыбранного = ПолучитьИзВременногоХранилища(Параметр);
			СпрГруппаНоменклатуры = "["+СтруктураВыбранного.КодАйко+"] "+СтруктураВыбранного.НаименованиеАйко;
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьРеквизитыНоменклатурыПриВыборе(ИдентификаторСтроки, НоменклатураСсылка)
	ТекСтрока = ТабНоменклатура.НайтиПоИдентификатору(ИдентификаторСтроки);
	ТекСтрока.Код1С = НоменклатураСсылка.Код;
КонецПроцедуры

&НаКлиенте
Процедура ТабНоменклатура1СНоменклатура1СОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	ЗаполнитьРеквизитыНоменклатурыПриВыборе(Элемент.Родитель.ТекущаяСтрока, ВыбранноеЗначение)	
КонецПроцедуры

&НаКлиенте
Процедура ПодобратьДокументыВыгрузки(Команда)
	ПараметрыПодбора = Новый Структура("ЗакрыватьПриВыборе, МножественныйВыбор", Ложь, Истина);
	Если ПустаяСтрока(ТипДокумента) Тогда
		Сообщение = Новый СообщениеПользователю;
		Сообщение.Поле  = "ТипДокумента";
		Сообщение.Текст = "Необходимо задать тип документа.";
		Сообщение.Сообщить();	
	Иначе
    	ОткрытьФорму("Документ."+ТипДокумента+".Форма.ФормаВыбора", ПараметрыПодбора, ЭтаФорма);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаВыбора(ВыбранноеЗначение, ИсточникВыбора)
	Для Каждого ДокСсылка Из ВыбранноеЗначение Цикл
		нСтроки = ТабДокументыВыгрузки.НайтиСтроки(Новый Структура("Документ1С", ДокСсылка));
		Если нСтроки.Количество() = 0 Тогда
			ДокВыгрузки = ТабДокументыВыгрузки.Добавить();
			ДокВыгрузки.Документ1С = ДокСсылка;  
		КонецЕсли;			
	КонецЦикла;
КонецПроцедуры

&НаКлиенте
Функция ПроверитьСопоставления()
	Для каждого ССНоменклатуры Из ТабНоменклатура Цикл
		Если ПустаяСтрока(ССНоменклатуры.КодАйко) Тогда
			Элементы.ГруппаСтраницы.ТекущаяСтраница = Элементы.ГруппаНоменклатура;
			Возврат Ложь;
		КонецЕсли;
	КонецЦикла;
	
	Для каждого СССклады Из ТабСклады Цикл
		Если ПустаяСтрока(СССклады.КодАйко) Тогда
			Элементы.ГруппаСтраницы.ТекущаяСтраница = Элементы.ГруппаСклады;
			Возврат Ложь;
		КонецЕсли;
	КонецЦикла;
	
	Для каждого ССПоставщики Из ТабПоставщики Цикл
		Если ПустаяСтрока(ССПоставщики.КодАйко) Тогда
			Элементы.ГруппаСтраницы.ТекущаяСтраница = Элементы.ГруппаПоставщики;
		КонецЕсли;
	КонецЦикла;
	
	Возврат Истина;
КонецФункции

&НаСервере
Процедура ПередатьДокументыВАйкоНаСервере()
	Для каждого ДокументВыгрузки Из ТабДокументыВыгрузки Цикл
		ПередатьВАйкоНаСервере(ДокументВыгрузки.Документ1С);
	КонецЦикла;	
КонецПроцедуры

&НаКлиенте
Процедура ПередатьДокументыВАйко(Команда)	
	Если Не ПроверитьСопоставления() Тогда
		ЗаписатьВЛог("Не сопоставлены необходимые значения! Передача документов невозможна.");
		Возврат;
	КонецЕсли;
	ПередатьДокументыВАйкоНаСервере();
	ИменаДанных = ПолучитьИменаДанных();
	Для каждого ИмяДанных Из ИменаДанных Цикл
		ЗанестиСопоставленияВНастройку(ИмяДанных)	
	КонецЦикла;
	СохранитьНастройкиНаСервере(ТекущаяНастройка);	
КонецПроцедуры

&НаКлиенте
Процедура ЗагрузитьСправочникиИзДокументовВыгрузки()
	Если ТабДокументыВыгрузки.Количество()=0 Тогда
		Возврат;
	КонецЕсли;
	ОчиститьТаблицыСопоставления();
	ЗагрузитьТаблицыИзДокументовНаСервере();
КонецПроцедуры

&НаКлиенте
Процедура ОчиститьДокументыВыгрузки(Команда)
	ТабДокументыВыгрузки.Очистить();
	ОчиститьТаблицыСопоставления();
	ОбновитьВидимостьТаблицСопоставления();
КонецПроцедуры

&НаКлиенте
Процедура ОчиститьТаблицыСопоставления()
	ТабНоменклатура.Очистить();
	ТабСклады.Очистить();
	ТабПоставщики.Очистить();
	ТабПрейскурант.Очистить();
КонецПроцедуры

&НаКлиенте
Процедура ОчиститьТаблицуНоменклатуры(Команда)
	ОчиститьТаблицыСопоставления();
КонецПроцедуры

&НаКлиенте
Процедура ОчиститьСопоставлениеТекущейСтроки(Команда)
	ТД = Элементы.ТабНоменклатура1С.ТекущиеДанные;
	ТД.КодАйко = "";
	ТД.НоменклатураАйко = "";
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьВидимостьТаблицСопоставления()
	Элементы.ГруппаНоменклатура.Видимость 	= (ТабНоменклатура.Количество()>0);
	Элементы.ГруппаСклады.Видимость 		= (ТабСклады.Количество()>0);
	Элементы.ГруппаПоставщики.Видимость 	= (ТабПоставщики.Количество()>0);
	Элементы.ГруппаПодразделения.Видимость 	= (ТабПрейскурант.Количество()>0);
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьСопоставленияИзДокументов(Команда)
	ЗагрузитьСправочникиИзДокументовВыгрузки();
	ОбновитьВидимостьТаблицСопоставления();
	ИменаДанных = ПолучитьИменаДанных();
	Для каждого ИмяДанных Из ИменаДанных Цикл
		ВосстановитьСопоставлениеИзНастройкиИАйко(ИмяДанных);	
	КонецЦикла;
КонецПроцедуры

&НаКлиенте
Процедура ЗанестиСопоставленияВНастройку(ИменаДанных) 
	ТСопоставления = ЭтаФорма["Таб"+ИменаДанных.ТаблицаСопоставления];
	Для каждого стр Из ТСопоставления Цикл
		кодАйко    = СокрЛП(стр["КодАйко"]);
		имяАйко    = стр[ИменаДанных.ПолеАйко];
		Ссылка1С   = стр[ИменаДанных.Поле1С];
		Если Не ЗначениеЗаполнено(имяАйко) Тогда
			ЗаписатьВЛог("Значение 1С не сопоставлено со значением IIKO. " + Ссылка1С);
			Продолжить;
		КонецЕсли;
		Если ПустаяСтрока(кодАйко) Тогда
			ЗаписатьВЛог("Для загруженной позиции IIKO " + имяАйко + " не задан код");
			Продолжить;
		КонецЕсли;	
		сохТаб = ТекущаяНастройка[ИменаДанных.ТаблицаСопоставления];
		сохСоп = сохТаб.Получить(Ссылка1С);
		Если ЗначениеЗаполнено(сохСоп) Тогда
			Если сохСоп <> кодАйко Тогда
				сохТаб.Вставить(Ссылка1С, кодАйко);
			КонецЕсли;
		Иначе
			сохТаб.Вставить(Ссылка1С, кодАйко);
		КонецЕсли;
	КонецЦикла;
КонецПроцедуры

&НаКлиенте
// Перед вызовом необходимо сначала загрузить настройки и справочники из IIKO
Процедура ВосстановитьСопоставлениеИзНастройкиИАйко(ИменаДанных)
	ТСопоставления = ЭтотОбъект["Таб"+ИменаДанных.ТаблицаСопоставления];
	ТАйко = ЭтотОбъект["Таб"+ИменаДанных.ТаблицаДанныхАйко];
	Для каждого стр Из ТСопоставления Цикл
		Ссылка1С = стр[ИменаДанных.Поле1С];
		
		сохТаб = ТекущаяНастройка[ИменаДанных.ТаблицаСопоставления];
		сохСоп = сохТаб.Получить(Ссылка1С);
		Если ЗначениеЗаполнено(сохСоп) Тогда
			кодАйко = сохСоп;
			нстрАйко = ТАйко.НайтиСтроки(Новый Структура("КодАйко", кодАйко));
			Если нстрАйко.Количество()>0 Тогда
				стр.КодАйко = кодАйко;
				стр[ИменаДанных.ПолеАйко] = нстрАйко[0][ИменаДанных.ПолеАйко]
			Иначе
				ЗаписатьВЛог("Сохраненное значение с кодом "+кодАйко+" не найдено в загруженном справочнике IIKO");
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьСписокВыбораТипаНоменклатуры()
	ТипыНоменклатурыАйко = ПолучитьСоответствияТиповНоменклатурыАйко();
	Для каждого ТипНоменклатуры Из ТипыНоменклатурыАйко Цикл
		Элементы.СпрТипНоменклатуры.СписокВыбора.Добавить(ТипНоменклатуры.Ключ, ТипНоменклатуры.Значение); 
	КонецЦикла;
КонецПроцедуры

&НаСервере
Функция ПолучитьСтруктуруНастроек(МассивИменТаблиц)
	сНастроек = Новый Структура;
	Для каждого ИмяТаблицы Из МассивИменТаблиц Цикл
		сНастроек.Вставить(ИмяТаблицы, Новый Соответствие);	
	КонецЦикла;
	Возврат сНастроек;
КонецФункции

&НаСервере
Функция ПолучитьИменаДанных()
	Возврат РеквизитФормыВЗначение("Объект").ПолучитьИменаПолейИТаблиц();	
КонецФункции

&НаСервере 
Функция ЗагрузитьНастройкиНаСервере()
	ОбъектЗн = РеквизитФормыВЗначение("Объект");
	н = ОбъектЗн.ЗагрузитьНастройки("IziCloudКлиент", IikoХост+":"+IikoПорт);
	Если н = Неопределено Тогда
		ИменаДанных = ОбъектЗн.ПолучитьИменаПолейИТаблиц();
		ИменаТаблиц = ОбъектЗн.ПолучитьМассивТаблиц(ИменаДанных);
		Возврат ПолучитьСтруктуруНастроек(ИменаТаблиц);
	Иначе
		Возврат н;
	КонецЕсли;
КонецФункции

&НаСервере
Процедура СохранитьНастройкиНаСервере(ТекущаяНастройка)
	ОбъектЗн = РеквизитФормыВЗначение("Объект");
	ОбъектЗн.СохранитьНастройки("IziCloudКлиент", IikoХост+":"+IikoПорт, ТекущаяНастройка);
КонецПроцедуры

&НаКлиенте
Процедура СоздатьНоменклатуру(Команда)
	Если Не СпрНоменклатура.Пустая() Тогда
		СтруктураНоменклатуры = СформироватьСтруктуруНоменклатуры(СпрНоменклатура);
		Если СтруктураНоменклатуры=Неопределено Тогда
			Возврат;
		КонецЕсли;
		ПередатьОбъектВАйко(СтруктураНоменклатуры, "entity", "createProduct");
	КонецЕсли;
КонецПроцедуры
